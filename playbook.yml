---
- name: Manually install Homebrew via git
  hosts: localhost
  #hosts: all
  connection: local
    #become: yes
    #become_user: "{{ ansible_user_id }}"
  # yes might fail in a minimal docker env
  gather_facts: yes
  vars:
    homebrew_user: "{{ ansible_user_id }}" # #"{{ ansible_user_id }}" #homebrew_user: "{{ lookup('env', 'USER') }}"
    homebrew_git_repo: https://github.com/Homebrew/brew
    homebrew_release: master  # or a tag like 4.2.0
    brew_formulae: 
      - neovim
      - asdf
      - ca-certificates
      - gettext
      - git
      - libunistring
      - libuv
      - lpeg
      - luajit
      - ncurses
      - openssl@3
      - pcre2
      - python@3.13
      - readline
      - sqlite
      - starship
      - tree-sitter
      - unibilium
      - utf8proc
      - xz


  tasks:

    - name: Ensure /home/linuxbrew/.linuxbrew exists
      become: yes
      file:
        path: "/home/linuxbrew/.linuxbrew"
        state: directory
        owner: "{{ homebrew_user }}"
        group: "{{ homebrew_user }}"
        mode: '0755'
      tags:
      - brew

    - name: Clone Homebrew GitHub repo
      ansible.builtin.git:
        repo: "{{ homebrew_git_repo }}"
        dest: "/home/linuxbrew/.linuxbrew/Homebrew"
        version: "{{ homebrew_release }}"
      become_user: "{{ homebrew_user }}"
      tags:
      - brew

    - name: Create bin directory for brew
      ansible.builtin.file:
        path: "/home/linuxbrew/.linuxbrew/bin"
        state: directory
        owner: "{{ homebrew_user }}"
        group: "{{ homebrew_user }}"
      tags:
      - brew

    - name: Create a symbolic link for brew
      ansible.builtin.file:
        src: "/home/linuxbrew/.linuxbrew/Homebrew/bin/brew"
        dest: "/home/linuxbrew/.linuxbrew/bin/brew"
        owner: "{{ homebrew_user }}"
        group: "{{ homebrew_user }}"
        state: link
      tags:
      - brew

    - name: Add brew to .bashrc
      become: false
      lineinfile:
        path: "/home/{{ homebrew_user }}/.bashrc"
        line: 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"'
        insertafter: EOF
      tags:
      - brew

    - name: Install Formula
      community.general.homebrew:
        name: "{{ brew_formulae }}"
        state: present
        path: "/home/linuxbrew/.linuxbrew/bin"
      become_user: "{{ homebrew_user }}"
      become: yes
      tags:
      - brew-install

    - name: Ensure ~/dotfiles directory exists
      become: yes
      file:
        path: "/home/{{ homebrew_user }}/dotfiles/"
        state: directory
        owner: "{{ homebrew_user }}"
        group: "{{ homebrew_user }}"
        mode: '0755'
      tags:
      - dotfiles-config

    - name: Ensure ~/.config directory exists
      become: yes
      file:
        path: "/home/{{ homebrew_user }}/.config/"
        state: directory
        owner: "{{ homebrew_user }}"
        group: "{{ homebrew_user }}"
        mode: '0755'
      tags:
      - dotfiles-config

    - name: Clone dotfiles repository into home directory
      git:
        repo: "git@github.com:coffemugtester/dotfiles.git"
        dest: "/home/{{ homebrew_user }}/dotfiles"
        version: main
        update: yes
      # become: false
      tags:
      - dotfiles-config

    - name: Update apt cache
      become: true
      apt:
        update_cache: yes
      when: ansible_os_family == "Debian"
      tags:
      - zsh

    - name: Install ZSH
      become: true
      ansible.builtin.package:
        name: zsh
        state: present
      tags:
      - zsh

    - name: Change user shell to zsh
      become: true
      user:
        name: "{{ ansible_user_id }}"
        shell: /usr/bin/zsh
      tags:
      - switch-zsh

    - name: Install missing Homebrew formulae
      shell: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        brew install {{ item }}
      args:
        executable: /usr/bin/zsh
      loop:
        # - colima # It's not needed for Linux machines
        # - lima # It goes with colima
        # - delve # TODO: there's no binary for ARM architecture so it needs to be built from source
        # - docker # TODO: there's no binary for ARM architecture so it needs to be built from source
        # - lazydocker # TODO: there's no binary for ARM architecture so it needs to be built from source
        # - lazygit # TODO: there's no binary for ARM architecture so it needs to be built from source
        - stow
        - docker-completion
        - git-filter-repo
        - htop
        - libevent
        - luv
        - mpdecimal
        - ripgrep
        - tmux
        - zsh-autocomplete
        - zsh-autosuggestions
        - zsh-syntax-highlighting
        - zsh-vi-mode
      tags: install_missing_formulae

    - name: Stow .config with Homebrew path
      shell: |
        export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"
        cd ~/dotfiles/config
        stow .config --target /home/{{ homebrew_user }}/.config --verbose=2
      args:
        executable: /usr/bin/zsh  # optional: in case your system prefers zsh
      tags:
      - stow

    - name: Stow dotfiles with Homebrew path
      shell: |
        export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"
        cd ~/dotfiles
        stow git tmux vim zsh --target /home/{{ homebrew_user }} --verbose=2
      args:
        executable: /usr/bin/zsh  # optional: in case your system prefers zsh
      tags:
      - stow

    - name: Clone TPM repository
      git:
        repo: 'https://github.com/tmux-plugins/tpm.git'
        dest: /home/{{ homebrew_user }}/.tmux/plugins/tpm
      become: true
      become_user: {{ homebrew_user }}
      tags: tmux

    - name: Install Oh My Zsh # noqa: latest
      ansible.builtin.git:
        repo: https://github.com/ohmyzsh/ohmyzsh.git
        dest: ~/.oh-my-zsh
        depth: 1
      tags:
      - ohmyzsh

    - name: Install NVM via Homebrew
      homebrew:
        name: nvm
        state: present
      tags:
      - nvm

    - name: Ensure NVM directory exists
      file:
        path: "/home/{{ homebrew_user }}/.nvm"
        state: directory
        mode: '0755'
      tags:
      - nvm

    - name: Install latest LTS Node using NVM
      shell: |
        export NVM_DIR="$HOME/.nvm"
        source /home/linuxbrew/.linuxbrew/opt/nvm/nvm.sh
        nvm install --lts
      args:
        executable: /usr/bin/zsh
      environment:
        NVM_DIR: "/home/{{ homebrew_user }}/.nvm"
      tags:
      - nvm

    - name: Install eslint and eslint_d globally
      shell: |
        export NVM_DIR="$HOME/.nvm"
        source /home/linuxbrew/.linuxbrew/opt/nvm/nvm.sh
        nvm use --lts
        npm install -g eslint eslint_d
      args:
        executable: /usr/bin/zsh
      environment:
        NVM_DIR: "/home/{{ homebrew_user }}/.nvm"
      tags:
      - nvm

